JMH Test Run with 1000 entries:

C:\Users\levin\.jdks\openjdk-23\bin\java.exe "-javaagent:C:\Users\levin\AppData\Local\Programs\IntelliJ IDEA Ultimate\lib\idea_rt.jar=51208:C:\Users\levin\AppData\Local\Programs\IntelliJ IDEA Ultimate\bin" -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8 -classpath C:\Coding\Modul-450\tools-lb3\target\classes;C:\Users\levin\.m2\repository\org\openjdk\jmh\jmh-core\1.37\jmh-core-1.37.jar;C:\Users\levin\.m2\repository\net\sf\jopt-simple\jopt-simple\5.0.4\jopt-simple-5.0.4.jar;C:\Users\levin\.m2\repository\org\apache\commons\commons-math3\3.6.1\commons-math3-3.6.1.jar org.openjdk.jmh.Main "org.example.jmh.JmhSearchBenchmarkHigh.*"
# JMH version: 1.37
# VM version: JDK 23, OpenJDK 64-Bit Server VM, 23+37-2369
# VM invoker: C:\Users\levin\.jdks\openjdk-23\bin\java.exe
# VM options: -javaagent:C:\Users\levin\AppData\Local\Programs\IntelliJ IDEA Ultimate\lib\idea_rt.jar=51208:C:\Users\levin\AppData\Local\Programs\IntelliJ IDEA Ultimate\bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.jmh.JmhSearchBenchmarkHigh.testBinarySearch

# Run progress: 0.00% complete, ETA 00:03:00
# Fork: 1 of 2
# Warmup Iteration   1: 293.862 ns/op
# Warmup Iteration   2: 220.026 ns/op
# Warmup Iteration   3: 183.927 ns/op
Iteration   1: 181.534 ns/op
Iteration   2: 177.226 ns/op
Iteration   3: 179.178 ns/op

# Run progress: 16.67% complete, ETA 00:02:35
# Fork: 2 of 2
# Warmup Iteration   1: 260.781 ns/op
# Warmup Iteration   2: 180.139 ns/op
# Warmup Iteration   3: 178.742 ns/op
Iteration   1: 176.258 ns/op
Iteration   2: 177.513 ns/op
Iteration   3: 174.218 ns/op


Result "org.example.jmh.JmhSearchBenchmarkHigh.testBinarySearch":
  177.654 �(99.9%) 7.021 ns/op [Average]
  (min, avg, max) = (174.218, 177.654, 181.534), stdev = 2.504
  CI (99.9%): [170.634, 184.675] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 23, OpenJDK 64-Bit Server VM, 23+37-2369
# VM invoker: C:\Users\levin\.jdks\openjdk-23\bin\java.exe
# VM options: -javaagent:C:\Users\levin\AppData\Local\Programs\IntelliJ IDEA Ultimate\lib\idea_rt.jar=51208:C:\Users\levin\AppData\Local\Programs\IntelliJ IDEA Ultimate\bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.jmh.JmhSearchBenchmarkHigh.testJumpSearch

# Run progress: 33.33% complete, ETA 00:02:04
# Fork: 1 of 2
# Warmup Iteration   1: 14.082 ns/op
# Warmup Iteration   2: 11.796 ns/op
# Warmup Iteration   3: 12.198 ns/op
Iteration   1: 12.370 ns/op
Iteration   2: 12.327 ns/op
Iteration   3: 12.306 ns/op

# Run progress: 50.00% complete, ETA 00:01:33
# Fork: 2 of 2
# Warmup Iteration   1: 16.222 ns/op
# Warmup Iteration   2: 11.483 ns/op
# Warmup Iteration   3: 12.354 ns/op
Iteration   1: 12.503 ns/op
Iteration   2: 12.235 ns/op
Iteration   3: 12.333 ns/op


Result "org.example.jmh.JmhSearchBenchmarkHigh.testJumpSearch":
  12.346 �(99.9%) 0.250 ns/op [Average]
  (min, avg, max) = (12.235, 12.346, 12.503), stdev = 0.089
  CI (99.9%): [12.096, 12.595] (assumes normal distribution)


# JMH version: 1.37
# VM version: JDK 23, OpenJDK 64-Bit Server VM, 23+37-2369
# VM invoker: C:\Users\levin\.jdks\openjdk-23\bin\java.exe
# VM options: -javaagent:C:\Users\levin\AppData\Local\Programs\IntelliJ IDEA Ultimate\lib\idea_rt.jar=51208:C:\Users\levin\AppData\Local\Programs\IntelliJ IDEA Ultimate\bin -Dfile.encoding=UTF-8 -Dsun.stdout.encoding=UTF-8 -Dsun.stderr.encoding=UTF-8
# Blackhole mode: compiler (auto-detected, use -Djmh.blackhole.autoDetect=false to disable)
# Warmup: 3 iterations, 5 s each
# Measurement: 3 iterations, 5 s each
# Timeout: 10 min per iteration
# Threads: 1 thread, will synchronize iterations
# Benchmark mode: Average time, time/op
# Benchmark: org.example.jmh.JmhSearchBenchmarkHigh.testLinearSearch

# Run progress: 66.67% complete, ETA 00:01:02
# Fork: 1 of 2
# Warmup Iteration   1: 67.691 ns/op
# Warmup Iteration   2: 45.962 ns/op
# Warmup Iteration   3: 51.069 ns/op
Iteration   1: 49.979 ns/op
Iteration   2: 49.304 ns/op
Iteration   3: 49.578 ns/op

# Run progress: 83.33% complete, ETA 00:00:31
# Fork: 2 of 2
# Warmup Iteration   1: 67.097 ns/op
# Warmup Iteration   2: 45.901 ns/op
# Warmup Iteration   3: 48.921 ns/op
Iteration   1: 49.488 ns/op
Iteration   2: 50.218 ns/op
Iteration   3: 50.085 ns/op


Result "org.example.jmh.JmhSearchBenchmarkHigh.testLinearSearch":
  49.775 �(99.9%) 1.032 ns/op [Average]
  (min, avg, max) = (49.304, 49.775, 50.218), stdev = 0.368
  CI (99.9%): [48.744, 50.807] (assumes normal distribution)


# Run complete. Total time: 00:03:06

REMEMBER: The numbers below are just data. To gain reusable insights, you need to follow up on
why the numbers are the way they are. Use profilers (see -prof, -lprof), design factorial
experiments, perform baseline and negative tests that provide experimental control, make sure
the benchmarking environment is safe on JVM/OS/HW level, ask for reviews from the domain experts.
Do not assume the numbers tell you what you want them to tell.

NOTE: Current JVM experimentally supports Compiler Blackholes, and they are in use. Please exercise
extra caution when trusting the results, look into the generated code to check the benchmark still
works, and factor in a small probability of new VM bugs. Additionally, while comparisons between
different JVMs are already problematic, the performance difference caused by different Blackhole
modes can be very significant. Please make sure you use the consistent Blackhole mode for comparisons.

Benchmark                                Mode  Cnt    Score   Error  Units
JmhSearchBenchmarkHigh.testBinarySearch  avgt    6  177.654 � 7.021  ns/op
JmhSearchBenchmarkHigh.testJumpSearch    avgt    6   12.346 � 0.250  ns/op
JmhSearchBenchmarkHigh.testLinearSearch  avgt    6   49.775 � 1.032  ns/op

Process finished with exit code 0
